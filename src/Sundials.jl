module Sundials

if isfile(joinpath(dirname(dirname(@__FILE__)),"deps","deps.jl"))
    include("../deps/deps.jl")
else
    error("Sundials not properly installed. Please run Pkg.build(\"Sundials\")")
end

##################################################################
# Deprecations
##################################################################

@deprecate ode cvode
@deprecate ida idasol
@deprecate nvlength length
@deprecate asarray convert
@deprecate nvector NVector


##################################################################
#
# Read in the wrapping code generated by the Clang.jl package.
#
##################################################################

typealias __builtin_va_list Ptr{:Void}

if isdefined(:libsundials_cvodes)
    libsundials_cvode = libsundials_cvodes
    libsundials_ida = libsundials_idas
end

shlib = libsundials_nvecserial
include("nvector.jl")
shlib = libsundials_cvode
include("libsundials.jl")
include("cvode.jl")
if isdefined(:libsundials_cvodes)
    shlib = libsundials_cvodes
    include("cvodes.jl")
end
shlib = libsundials_ida
include("ida.jl")
if isdefined(:libsundials_cvodes)
    shlib = libsundials_idas
    include("idas.jl")
end
shlib = libsundials_kinsol
include("kinsol.jl")

include("constants.jl")

##################################################################
#
# Types to facilitate release of memory allocated by the library
#
##################################################################
type KINSOL   # memory handle for KINSOL
    kinsol::Vector{KINSOL_ptr} # vector for passing to functions expecting Ptr{KINSOL_ptr}
    function KINSOL()
        k = new([KINCreate()])
        finalizer(k, KINFree)
        return k
    end
end
Base.convert(::Type{KINSOL_ptr}, k::KINSOL) = k.kinsol[1]
Base.convert(T::Type{Ptr{KINSOL_ptr}}, k::KINSOL) = convert(T, k.kinsol)

type CVODE    # memory handle for CVode
    cvode::Vector{CVODE_ptr} # vector for passing to functions expecting Ptr{CVODE_ptr}
    function CVODE(lmm::Int, iter::Int)
        k = new([CVodeCreate(lmm, iter)])
        finalizer(k, CVodeFree)
        return k
    end
end
Base.convert(::Type{CVODE_ptr}, k::CVODE) = k.cvode[1]
Base.convert(T::Type{Ptr{CVODE_ptr}}, k::CVODE) = convert(T, k.cvode)

type IDA # memory handle for IDA
    ida::Vector{IDA_ptr} # vector for passing to functions expecting Ptr{IDA_ptr}
    function IDA()
        k = new([IDACreate()])
        finalizer(k, IDAFree)
        return k
    end
end
Base.convert(::Type{IDA_ptr}, k::IDA) = k.ida[1]
Base.convert(T::Type{Ptr{IDA_ptr}}, k::IDA) = convert(T, k.ida)

type NVector <: DenseVector{RealType} # memory handle for NVectors
    ptr::Vector{N_Vector} # vector for passing to functions expecting Ptr{N_Vector}
    v::Vector{RealType}

    function NVector(x::Vector{RealType})
        k = new([N_VMake_Serial(length(x), x)], x)
        finalizer(k, N_VDestroy_Serial)
        return k
    end
end
NVector{T<:Real}(x::Vector{T}) = NVector(copy!(similar(x, RealType), x))

Base.convert(::Type{N_Vector}, nv::NVector) = nv.ptr[1]
Base.convert(::Type{Vector{RealType}}, nv::NVector)= nv.v

Base.size(nv::NVector, d...) = size(nv.v, d...)

Base.getindex(nv::NVector, i::Real) = getindex(nv.v, i)
Base.getindex(nv::NVector, i::AbstractArray) = getindex(nv.v, i)
Base.getindex(nv::NVector, inds...) = getindex(nv.v, inds...)

Base.setindex!(nv::NVector, X, i::Real ) = setindex!(nv.v, X, i)
Base.setindex!(nv::NVector, X, i::AbstractArray ) = setindex!(nv.v, X, i)
Base.setindex!(nv::NVector, X, inds... ) = setindex!(nv.v, X, inds...)

Base.stride(nv::NVector, k::Integer) = stride(nv.v, k)

##################################################################
#
# Methods to convert between Julia Vectors and Sundials N_Vectors.
#
##################################################################

nvlength(x::N_Vector) = unsafe_load(unsafe_load(convert(Ptr{Ptr{Clong}}, x)))
asarray(x::N_Vector) = pointer_to_array(N_VGetArrayPointer_Serial(x), (nvlength(x),))
asarray(x::Vector{RealType}) = x
asarray(x::Ptr{RealType}, dims::Tuple) = pointer_to_array(x, dims)
asarray(x::N_Vector, dims::Tuple) = reinterpret(RealType, asarray(x), dims)


##################################################################
#
# Methods following the C API that allow the direct use of Julia
# Vectors instead of Sundials N_Vectors and Functions in place of
# CFunctions.
#
##################################################################



# KINSOL
KINInit(mem, sysfn::Function, y) =
    KINInit(mem, cfunction(sysfn, Int32, (N_Vector, N_Vector, Ptr{Void})), NVector(y))
KINSetConstraints(mem, constraints::Vector{RealType}) =
    KINSetConstraints(mem, NVector(constraints))
KINSol(mem, u::Vector{RealType}, strategy, u_scale::Vector{RealType}, f_scale::Vector{RealType}) =
    KINSol(mem, NVector(u), strategy, NVector(u_scale), NVector(f_scale))

# IDA
IDAInit(mem, res::Function, t0, yy0, yp0) =
    IDAInit(mem, cfunction(res, Int32, (RealType, N_Vector, N_Vector, N_Vector, Ptr{Void})), t0, NVector(yy0), NVector(yp0))
IDARootInit(mem, nrtfn, g::Function) =
    IDARootInit(mem, nrtfn, cfunction(g, Int32, (RealType, N_Vector, N_Vector, Ptr{RealType}, Ptr{Void})))
IDASVtolerances(mem, reltol, abstol::Vector{RealType}) =
    IDASVtolerances(mem, reltol, NVector(abstol))
IDADlsSetDenseJacFn(mem, jac::Function) =
    IDADlsSetDenseJacFn(mem, cfunction(jac, Int32, (Int32, RealType, RealType, N_Vector, N_Vector, N_Vector, DlsMat, Ptr{Void}, N_Vector, N_Vector, N_Vector)))
IDASetId(mem, id::Vector{RealType}) =
    IDASetId(mem, NVector(id))
IDASetConstraints(mem, constraints::Vector{RealType}) =
    IDASetConstraints(mem, NVector(constraints))
IDASolve(mem, tout, tret, yret::Vector{RealType}, ypret::Vector{RealType}, itask) =
    IDASolve(mem, tout, tret, NVector(yret), NVector(ypret), itask)

# CVODE
CVodeInit(mem, f::Function, t0, y0) =
    CVodeInit(mem, cfunction(f, Int32, (RealType, N_Vector, N_Vector, Ptr{Void})), t0, NVector(y0))
CVodeReInit(mem, t0, y0::Vector{RealType}) =
    CVodeReInit(mem, t0, NVector(y0))
CVodeSVtolerances(mem, reltol, abstol::Vector{RealType}) =
    CVodeSVtolerances(mem, reltol, NVector(abstol))
CVodeGetDky(mem, t, k, dky::Vector{RealType}) =
    CVodeGetDky(mem, t, k, NVector(dky))
CVodeGetErrWeights(mem, eweight::Vector{RealType}) =
    CVodeGetErrWeights(mem, NVector(eweight))
CVodeGetEstLocalErrors(mem, ele::Vector{RealType}) =
    CVodeGetEstLocalErrors(mem, NVector(ele))
CVodeRootInit(mem, nrtfn, g::Function) =
    CVodeRootInit(mem, nrtfn, cfunction(g, Int32, (RealType, N_Vector, Ptr{RealType}, Ptr{Void})))
CVDlsSetDenseJacFn(mem, jac::Function) =
    CVDlsSetDenseJacFn(mem, cfunction(jac, Int32, (Int32, RealType, N_Vector, N_Vector, DlsMat, Ptr{Void}, N_Vector, N_Vector, N_Vector)))
CVode(mem, tout, yout::Vector{RealType}, tret, itask) =
    CVode(mem, tout, NVector(yout), tret, itask)

if isdefined(:libsundials_cvodes)
# CVODES
CVodeQuadInit(mem, fQ::Function, yQ0) =
    CVodeQuadInit(mem, cfunction(fQ, Int32, (RealType, N_Vector, N_Vector, Ptr{Void})), NVector(yQ0))
CVodeQuadReInit(mem, yQ0::Vector{RealType}) =
    CVodeQuadReInit(mem, NVector(yQ0))
CVodeQuadSVtolerances(mem, reltolQ, abstolQ::Vector{RealType}) =
    CVodeQuadSVtolerances(mem, reltolQ, NVector(abstolQ))
CVodeSensInit(mem, Ns, ism, fS::Function, yS0) =
    CVodeSensInit(mem, Ns, ism, cfunction(fS, Int32, (int32, RealType, N_Vector, N_Vector, N_Vector, N_Vector, Ptr{Void}, N_Vector, N_Vector)), NVector(yS0))
CVodeSensInit1(mem, Ns, ism, fS1::Function, yS0) =
    CVodeSensInit1(mem, Ns, ism, cfunction(fS1, Int32, (int32, RealType, N_Vector, N_Vector, int32, N_Vector, N_Vector, Ptr{Void}, N_Vector, N_Vector)), NVector(yS0))
CVodeSensReInit(mem, ism, yS0::Vector{RealType}) =
    CVodeSensReInit(mem, ism, NVector(yS0))
CVodeSensSVtolerances(mem, reltolS, abstolS::Vector{RealType}) =
    CVodeSensSVtolerances(mem, reltolS, NVector(abstolS))
CVodeQuadSensInit(mem, fQS::Function, yQS0) =
    CVodeQuadSensInit(mem, cfunction(fQS, Int32, (int32, RealType, N_Vector, N_Vector, N_Vector, N_Vector, Ptr{Void}, N_Vector, N_Vector)), NVector(yQS0))
CVodeQuadSensReInit(mem, yQS0::Vector{RealType}) =
    CVodeQuadSensReInit(mem, NVector(yQS0))
CVodeQuadSensSVtolerances(mem, reltolQS, abstolQS::Vector{RealType}) =
    CVodeQuadSensSVtolerances(mem, reltolQS, NVector(abstolQS))
CVodeGetQuad(mem, tret, yQout::Vector{RealType}) =
    CVodeGetQuad(mem, tret, NVector(yQout))
CVodeGetQuadDky(mem, t, k, dky::Vector{RealType}) =
    CVodeGetQuadDky(mem, t, k, NVector(dky))
CVodeGetSens(mem, tret, ySout::Vector{RealType}) =
    CVodeGetSens(mem, tret, NVector(ySout))
CVodeGetSens1(mem, tret, is, ySout::Vector{RealType}) =
    CVodeGetSens1(mem, tret, is, NVector(ySout))
CVodeGetSensDky(mem, t, k, dkyA::Vector{RealType}) =
    CVodeGetSensDky(mem, t, k, NVector(dkyA))
CVodeGetSensDky1(mem, t, k, is, dky::Vector{RealType}) =
    CVodeGetSensDky1(mem, t, k, is, NVector(dky))
CVodeGetQuadSens(mem, tret, yQSout::Vector{RealType}) =
    CVodeGetQuadSens(mem, tret, NVector(yQSout))
CVodeGetQuadSens1(mem, tret, is, yQSout::Vector{RealType}) =
    CVodeGetQuadSens1(mem, tret, is, NVector(yQSout))
CVodeGetQuadSensDky(mem, t, k, kdyQS_all::Vector{RealType}) =
    CVodeGetQuadSensDky(mem, t, k, NVector(kdyQS_all))
CVodeGetQuadSensDky1(mem, t, k, is, kdyQS::Vector{RealType}) =
    CVodeGetQuadSensDky1(mem, t, k, is, NVector(kdyQS))
CVodeGetQuadErrWeights(mem, eQweight::Vector{RealType}) =
    CVodeGetQuadErrWeights(mem, NVector(eQweight))
CVodeGetSensErrWeights(mem, eSweight::Vector{RealType}) =
    CVodeGetSensErrWeights(mem, NVector(eSweight))
CVodeGetQuadSensErrWeights(mem, eQSweight::Vector{RealType}) =
    CVodeGetQuadSensErrWeights(mem, NVector(eQSweight))
CVodeInitB(mem, which, fB::Function, tB0, yB0) =
    CVodeInitB(mem, which, cfunction(fB, Int32, (RealType, N_Vector, N_Vector, N_Vector, Ptr{Void})), tB0, NVector(yB0))
CVodeInitBS(mem, which, fBs::Function, tB0, yB0) =
    CVodeInitBS(mem, which, cfunction(fBs, Int32, (RealType, N_Vector, N_Vector, N_Vector, Ptr{Void})), tB0, NVector(yB0))
CVodeReInitB(mem, which, tB0, yB0::Vector{RealType}) =
    CVodeReInitB(mem, which, tB0, NVector(yB0))
CVodeSVtolerancesB(mem, which, reltolB, abstolB::Vector{RealType}) =
    CVodeSVtolerancesB(mem, which, reltolB, NVector(abstolB))
CVodeQuadInitB(mem, which, fQB::Function, yQB0) =
    CVodeQuadInitB(mem, which, cfunction(fQB, Int32, (RealType, N_Vector, N_Vector, N_Vector, Ptr{Void})), NVector(yQB0))
CVodeQuadInitBS(mem, which, fQBs::Function, yQB0) =
    CVodeQuadInitBS(mem, which, cfunction(fQBs, Int32, (RealType, N_Vector, N_Vector, N_Vector, N_Vector, Ptr{Void})), NVector(yQB0))
CVodeQuadReInitB(mem, which, yQB0::Vector{RealType}) =
    CVodeQuadReInitB(mem, which, NVector(yQB0))
CVodeQuadSVtolerancesB(mem, which, reltolQB, abstolQB::Vector{RealType}) =
    CVodeQuadSVtolerancesB(mem, which, reltolQB, NVector(abstolQB))
CVodeF(mem, tout, yout::Vector{RealType}, tret, itask, ncheckPtr) =
    CVodeF(mem, tout, NVector(yout), tret, itask, ncheckPtr)
CVodeGetB(mem, which, tBret, yB::Vector{RealType}) =
    CVodeGetB(mem, which, tBret, NVector(yB))
CVodeGetQuadB(mem, which, tBret, qB::Vector{RealType}) =
    CVodeGetQuadB(mem, which, tBret, NVector(qB))
CVodeGetAdjY(mem, which, t, y::Vector{RealType}) =
    CVodeGetAdjY(mem, which, t, NVector(y))
CVodeGetAdjDataPointHermite(mem, which, t, y::Vector{RealType}, yd::Vector{RealType}) =
    CVodeGetAdjDataPointHermite(mem, which, t, NVector(y), NVector(yd))
CVodeGetAdjDataPointPolynomial(mem, which, t, y::Vector{RealType}) =
    CVodeGetAdjDataPointPolynomial(mem, which, t, NVector(y))
CVodeWFtolerances(mem, efun::Function) =
    CVodeWFtolerances(mem, cfunction(efun, Int32, (N_Vector, N_Vector, Ptr{Void})))
CVodeSetErrHandlerFn(mem, ehfun::Function, eh_data) =
    CVodeSetErrHandlerFn(mem, cfunction(ehfun, Void, (Int32, Ptr{Uint8}, Ptr{Uint8}, Ptr{Uint8}, Ptr{Void})), eh_data)

# IDAS  (still incomplete)
IDAReInit(mem, t0, yy0::Vector{RealType}, yp0::Vector{RealType}) =
    IDAReInit(mem, t0, NVector(yy0), NVector(yp0))
IDAQuadInit(mem, rhsQ::Function, yQ0) =
    IDAQuadInit(mem, cfunction(rhsQ, Int32, (RealType, N_Vector, N_Vector, N_Vector, Ptr{Void})), NVector(yQ0))
IDAQuadReInit(mem, yQ0::Vector{RealType}) =
    IDAQuadReInit(mem, NVector(yQ0))

## IDAQuadSVtolerances(mem, reltol, abstol::Vector{RealType}) =
##  IDAQuadSVtolerances(mem, reltol, NVector(abstol))

end # isdefined(:libsundials_cvodes)

##################################################################
#
# Simplified interfaces.
#
##################################################################


@c Int32 KINSetUserData (:KINSOL_ptr,Any) libsundials_kinsol  ## needed to allow passing a Function through the user data

function kinsolfun(y::N_Vector, fy::N_Vector, userfun::Function)
    y = asarray(y)
    fy = asarray(fy)
    userfun(y, fy)
    return int32(0)
end

function kinsol(f::Function, y0::Vector{Float64})
    # f, Function to be optimized of the form f(y::Vector{Float64}, fy::Vector{Float64})
    #    where `y` is the input vector, and `fy` is the result of the function
    # y0, Vector of initial values
    # return: the solution vector
    neq = length(y0)
    kmem = KINSOL()

    # use the user_data field to pass a function
    #   see: https://github.com/JuliaLang/julia/issues/2554
    flag = KINInit(kmem, cfunction(kinsolfun, Int32, (N_Vector, N_Vector, Function)), NVector(y0))
    flag = KINDense(kmem, neq)
    flag = KINSetUserData(kmem, f)
    ## Solve problem
    scale = ones(neq)
    strategy = 0   # KIN_NONE
    y = copy(y0)
    flag = Sundials.KINSol(kmem,
                           y,
                           strategy,
                           scale,
                           scale)
    if flag != 0
        println("KINSol error found")
    end
    return y
end

@c Int32 CVodeSetUserData (:CVODE_ptr,Any) libsundials_cvode  ## needed to allow passing a Function through the user data

function cvodefun(t::Float64, y::N_Vector, yp::N_Vector, userfun::Function)
    y = asarray(y)
    yp = asarray(yp)
    userfun(t, y, yp)
    return int32(0)
end

function cvode(f::Function, y0::Vector{Float64}, t::Vector{Float64}; reltol::Float64=1e-4, abstol::Float64=1e-6)
    # f, Function to be optimized of the form f(y::Vector{Float64}, fy::Vector{Float64}, t::Float64)
    #    where `y` is the input vector, and `fy` is the
    # y0, Vector of initial values
    # t, Vector of time values at which to record integration results
    # reltol, Relative Tolerance to be used (default=1e-4)
    # abstol, Absolute Tolerance to be used (default=1e-6)
    # return: a solution matrix with time steps in `t` along rows and
    #         state variable `y` along columns
    neq = length(y0)
    mem = CVODE(CV_BDF, CV_NEWTON)

    flag = CVodeInit(mem, cfunction(cvodefun, Int32, (RealType, N_Vector, N_Vector, Function)), t[1], NVector(y0))
    flag = CVodeSetUserData(mem, f)
    flag = CVodeSStolerances(mem, reltol, abstol)
    flag = CVDense(mem, neq)
    yres = zeros(length(t), length(y0))
    yres[1,:] = y0
    y = copy(y0)
    tout = [0.0]
    for k in 2:length(t)
        flag = CVode(mem, t[k], y, tout, CV_NORMAL)
        yres[k,:] = y
    end
    return yres
end

@c Int32 IDASetUserData (:IDA_ptr,Any) libsundials_ida  ## needed to allow passing a Function through the user data

function idasolfun(t::Float64, y::N_Vector, yp::N_Vector, r::N_Vector, userfun::Function)
    y = asarray(y)
    yp = asarray(yp)
    r = asarray(r)
    userfun(t, y, yp, r)
    return int32(0)   # indicates normal return
end

function idasol(f::Function, y0::Vector{Float64}, yp0::Vector{Float64}, t::Vector{Float64}; reltol::Float64=1e-4, abstol::Float64=1e-6)
    # f, Function to be optimized of the form f(y::Vector{Float64}, fy::Vector{Float64})
    #    where `y` is the input vector, and `fy` is the
    # y0, Vector of initial values
    # yp0, Vector of initial values of the derivatives
    # reltol, Relative Tolerance to be used (default=1e-4)
    # abstol, Absolute Tolerance to be used (default=1e-6)
    # return: (y,yp) two solution matrices representing the states and state derivatives
    #         with time steps in `t` along rows and state variable `y` or `yp` along columns
    neq = length(y0)
    mem = IDA()

    flag = IDAInit(mem, cfunction(idasolfun, Int32, (RealType, N_Vector, N_Vector, N_Vector, Function)), t[1], NVector(y0), NVector(yp0))
    flag = IDASetUserData(mem, f)
    flag = IDASStolerances(mem, reltol, abstol)
    flag = IDADense(mem, neq)
    rtest = zeros(neq)
    f(t[1], y0, yp0, rtest)
    if any(abs(rtest) .>= reltol)
        flag = IDACalcIC(mem, Sundials.IDA_YA_YDP_INIT, t[1] + tstep)
    end
    yres = zeros(length(t), length(y0))
    ypres = zeros(length(t), length(y0))
    yres[1,:] = y0
    ypres[1,:] = yp0
    y = copy(y0)
    yp = copy(yp0)
    tout = [0.0]
    for k in 2:length(t)
        retval = Sundials.IDASolve(mem, t[k], tout, y, yp, IDA_NORMAL)
        yres[k,:] = y
        ypres[k,:] = yp
    end
    return yres, ypres
end


end # module
